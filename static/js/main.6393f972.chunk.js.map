{"version":3,"sources":["components/Todoitem.js","components/Todos.js","components/Header.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todoitem","getStyle","background","paddding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","clickHandler","React","Component","color","border","borderRadius","padding","cursor","float","Todos","todos","map","index","key","Header","headerStyle","buttonClickHandler","textAlign","margin","AddTodo","state","event","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","App","about","length","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAGaA,G,MAAb,4MACCC,SAAS,WACR,MAAO,CACNC,WAAY,UACZC,SAAU,OACVC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAU,eAAe,SAN5D,uDAUW,IAAD,EACUC,KAAKH,MAAMC,KAAtBG,EADC,EACDA,GAAGC,EADF,EACEA,MACV,OACC,yBAAKC,MAAOH,KAAKR,YAChB,2BAAG,2BAAOY,KAAK,WAAWC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAKC,KACrEC,EACD,4BAAQC,MAAOK,EAAUC,QAAST,KAAKH,MAAMa,aAAaH,KAAKP,KAAKC,IAApE,WAhBJ,GAA8BU,IAAMC,YA2B9BJ,EAAS,CACdf,WAAW,UACXoB,MAAM,OACNC,OAAO,OACPC,aAAa,MACbC,QAAQ,UACRC,OAAO,UACPC,MAAM,SAGQ3B,ICtBA4B,EAff,uKAEW,IAAD,OACR,OAAOnB,KAAKH,MAAMuB,MAAMC,KAAI,SAACvB,EAAKwB,GAAN,OAC3B,kBAAC,EAAD,CAAUC,IAAKzB,EAAKG,GAAIH,KAAMA,EAC9BQ,aAAc,EAAKT,MAAMS,aACzBI,aAAc,EAAKb,MAAMa,sBAN5B,GAA2BC,IAAMC,WCDlB,SAASY,EAAO3B,GAC9B,OACC,4BAAQM,MAAOsB,GACf,wCACA,4BAAQtB,MAAOK,EAAUC,QAASZ,EAAM6B,oBAAxC,UAIF,IAAMD,EAAY,CACjBhC,WAAW,OACXoB,MAAM,OACNc,UAAU,SACVX,QAAQ,QAEHR,EAAS,CACdK,MAAM,OACNpB,WAAW,OACXuB,QAAQ,MACRF,OAAO,OACPc,OAAO,O,OCnBaC,E,4MACpBC,MAAM,CACL5B,MAAM,I,EAEPG,SAAS,SAAC0B,GAAD,OAAS,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAEnEC,SAAS,SAACL,GACTA,EAAMM,iBACN,EAAKxC,MAAMyC,QAAQ,EAAKR,MAAM5B,OAC9B,EAAK8B,SAAS,CAAC9B,MAAM,M,uDAGrB,OACC,0BAAMC,MAAO,CAACoC,QAAQ,QAASH,SAAUpC,KAAKoC,UAC9C,2BAAOhC,KAAK,OACX8B,KAAK,QACLM,YAAY,eACZrC,MAAO,CAACsC,KAAK,KAAKzB,QAAQ,OAC1BmB,MAAOnC,KAAK8B,MAAM5B,MAClBG,SAAUL,KAAKK,WAChB,2BAAOD,KAAK,SACZsC,UAAU,MACTvC,MAAO,CAACsC,KAAM,Y,GAtBmB9B,IAAMC,WCoF5B+B,EA/Ef,4MACEb,MAAM,CACJV,MAAM,CACN,CAACnB,GAAG,EACFC,MAAM,kBACNH,WAAU,GAEZ,CAACE,GAAG,EACFC,MAAM,cACNH,WAAU,GAEZ,CAACE,GAAG,EACFC,MAAM,kBACNH,WAAU,IAGf6C,OAAM,GAhBP,EAkBAC,OAAO,YAAI,EAAKf,MAAMV,OAAOyB,OAlB7B,EAoBEvC,aAAa,SAACL,GACZ,EAAK+B,SAAS,CAACZ,MAAO,EAAKU,MAAMV,MAAMC,KAAI,SAACvB,GAI1C,OAHGA,EAAKG,KAAKA,IACXH,EAAKC,WAAWD,EAAKC,WAEhBD,QAzBb,EA6BEY,aAAa,SAACT,GACX,EAAK+B,SAAS,CAACZ,MAAM,YAAK,EAAKU,MAAMV,MAAM0B,QAAO,SAAAhD,GAAI,OAAIA,EAAKG,KAAKA,SA9BzE,EAkCAqC,QAAQ,SAACpC,GAEP,GADA,EAAK2C,QAAQ,EACF,KAAR3C,EAAW,CAEZ,IAAM6C,EAAQ,CACZ9C,GAAG,EAAK4C,OACR3C,MAAMA,EACNH,WAAU,GAEZ,EAAKiC,SAAS,CAACZ,MAAM,GAAD,mBAAK,EAAKU,MAAMV,OAAhB,CAAsB2B,QA3C9C,EA+CArB,mBAAmB,WACjB,EAAKM,SAAS,CAACY,OAAO,EAAKd,MAAMc,SAhDnC,uDAqDI,OAAG5C,KAAK8B,MAAMc,MAEZ,yBAAKF,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAClB,EAAD,CAAQE,mBAAoB1B,KAAK0B,qBACjC,kBAAC,EAAD,CAASY,QAAStC,KAAKsC,UACvB,kBAAC,EAAD,CAAOlB,MAAOpB,KAAK8B,MAAMV,MACxBd,aAAcN,KAAKM,aACnBI,aAAcV,KAAKU,iBAMrB,yBAAKgC,UAAU,OAChB,yBAAKA,UAAU,aACb,kBAAClB,EAAD,CAAQE,mBAAoB1B,KAAK0B,qBACjC,wBAAIvB,MAAO,CAACwB,UAAU,WAAtB,sBAtEV,GAAyBhB,IAAMC,WCKXoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6393f972.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport class Todoitem extends React.Component {\n\tgetStyle=()=>{\n\t\treturn {\n\t\t\tbackground: '#f4f4f4',\n\t\t\tpaddding: '10px',\n\t\t\tborderBottom: '1px #ccc dotted',\n\t\t\ttextDecoration: this.props.todo.completed?'line-through':'none'\n\t\t\t\t}\t\n\t\t\t\t  }\n\n\trender() {\n\t\tconst {id,title }=this.props.todo;\n\t\treturn (\n\t\t\t<div style={this.getStyle()}>\n\t\t\t\t<p><input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>\n\t\t\t\t{title}\n\t\t\t\t<button style={btnStyle} onClick={this.props.clickHandler.bind(this,id)} >\n\t\t\t\tx</button></p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nTodoitem.propTypes={\n\ttodo: PropTypes.object.isRequired\n}\nconst btnStyle={\n\tbackground:\"#ff0000\",\n\tcolor:\"#fff\",\n\tborder:\"none\",\n\tborderRadius:\"50%\",\n\tpadding:'5px 8px',\n\tcursor:\"pointer\",\n\tfloat:\"right\"\n\n}\nexport default Todoitem","import React from 'react'\nimport Todoitem from './Todoitem'\nimport PropTypes from 'prop-types'\nexport class Todos extends React.Component {\n\n\trender() {\n\t\treturn this.props.todos.map((todo,index)=>(\n\t\t\t<Todoitem key={todo.id} todo={todo} \n\t\t\tmarkComplete={this.props.markComplete} \n\t\t\tclickHandler={this.props.clickHandler}/>\n\t\t\t));\n\t}\n}\n\nTodos.propTypes={\n\ttodos: PropTypes.array.isRequired\n}\n\nexport default Todos","import React from 'react'\n\nexport default function Header(props) {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t<h1>Todolist</h1>\n\t\t<button style={btnStyle} onClick={props.buttonClickHandler}>About</button>\n\t\t</header>\n\t)\n}\nconst headerStyle={\n\tbackground:'#333',\n\tcolor:\"#fff\",\n\ttextAlign:\"center\",\n\tpadding:\"10px\"\n}\nconst btnStyle={\n\tcolor:\"#fff\",\n\tbackground:'#333',\n\tpadding:'5px',\n\tborder:'none',\n\tmargin:\"5px\"\n\n}","import React from 'react'\n\nexport default class AddTodo extends React.Component {\n\tstate={\n\t\ttitle:''\n\t}\n\tonChange=(event)=>this.setState({[event.target.name]: event.target.value})\n\n\tonSubmit=(event)=>{\n\t\tevent.preventDefault();\n\t\tthis.props.addTodo(this.state.title);\n\t\tthis.setState({title:''})\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<form style={{display:'flex'}} onSubmit={this.onSubmit}>\n\t\t\t<input type='text'\n\t\t\t name='title'\n\t\t\t placeholder='Add Todo....' \n\t\t\t style={{flex:'10',padding:'5px'}} \n\t\t\t value={this.state.title}\n\t\t\t onChange={this.onChange}/>\n\t\t\t<input type='submit' \n\t\t\tclassName='btn'\n\t\t\t style={{flex: '1'}}\n\t\t\t  />\n\t\t\t</form>\n\t\t)\n\t}\n}","import React from 'react'\nimport './App.css'\nimport Todos from './components/Todos'\nimport Header from './components/Header'\nimport AddTodo from './components/AddTodo'\n\n\nexport class App extends React.Component {\n  state={\n    todos:[\n    {id:1,\n      title:\"wash the cloths\",\n      completed:false\n    },\n    {id:2,\n      title:\"study react\",\n      completed:false\n    },\n    {id:3,\n      title:\"do some project\",\n      completed:false\n    }\n ],\n about:true\n  }\nlength=[...this.state.todos].length\n//checkComplete\n  markComplete=(id)=>{\n    this.setState({todos: this.state.todos.map((todo)=>{\n      if(todo.id===id){\n        todo.completed=!todo.completed\n      }\n      return todo})\n  });\n}\n//delete\n  clickHandler=(id)=>{\n     this.setState({todos: [...this.state.todos.filter(todo => todo.id!==id)]});\n\n}\n//add\naddTodo=(title)=>{\n  this.length+=1\n  if(title!==''){\n\n    const newTodo={\n      id:this.length,\n      title:title,\n      completed:false\n    }\n    this.setState({todos:[...this.state.todos,newTodo]})\n}\n}\n//about\nbuttonClickHandler=()=>{\n  this.setState({about:!this.state.about})\n}\n\n  render() {\n    //console.log(this.state.todos)\n    if(this.state.about){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header buttonClickHandler={this.buttonClickHandler}></Header>\n          <AddTodo addTodo={this.addTodo}/>\n          <Todos todos={this.state.todos}\n           markComplete={this.markComplete} \n           clickHandler={this.clickHandler}/>\n        </div>\n      </div>\n    )}\n    else{\n      return(\n         <div className=\"App\">\n        <div className=\"container\">\n          <Header buttonClickHandler={this.buttonClickHandler}></Header>\n          <h4 style={{textAlign:'center'}}>TodoApp_v1.0</h4>\n          </div>\n          </div>\n        )\n\n    }\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}